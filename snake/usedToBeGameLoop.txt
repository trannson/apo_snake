/*
GAME LOOP
*********************************************************************************************************************************
*/

/*
  Snake's direction
  1 means LEFT, 2 means TOP, 3 means RIGHT, 4 means DOWN
*/
  int blue_snake_len = 2;
  int blue_snake_dir = 1;
  int blue_snake_curr_dir = ((r&0xff));
  int blue_snake_prev_dir = ((r&0xff));
  unsigned short blue_snake_clr = 0x7ff;

  Snake* blue_snake = create_snake_part(0, 150, 150);
  Snake* blue_tail = create_snake_part(1, 165, 150);
  add_snake(blue_snake, blue_tail);

  int red_snake_len = 2;
  int red_snake_dir = 4;
  int red_snake_curr_dir = (((r>>16)&0xff));
  int red_snake_prev_dir = (((r>>16)&0xff));
  unsigned short red_snake_clr = 0xF000;
  
  Snake* red_snake = create_snake_part(0, 50, 50);
  Snake* red_tail = create_snake_part(1, 35, 50);
  add_snake(red_snake, red_tail);
  
  // FOOD
  int apple_x = 200;
  int apple_y = 200;

  while (1) {
 
    r = *(volatile uint32_t*)(mem_base + SPILED_REG_KNOBS_8BIT_o);

    blue_snake_curr_dir = ((r&0xff)); // blue knob
    red_snake_curr_dir = (((r>>16)&0xff));

    blue_snake_dir = modify_while_rotating(blue_snake_curr_dir, blue_snake_prev_dir, blue_snake_dir, 4);
    red_snake_dir = modify_while_rotating(red_snake_curr_dir, red_snake_prev_dir, red_snake_dir, 4);

    blue_snake_prev_dir = blue_snake_curr_dir;
    red_snake_prev_dir = red_snake_curr_dir;

    move_snakes_body(blue_tail);
    move_snakes_body(red_tail);

    move_snakes_head(blue_snake_dir, blue_snake);
    move_snakes_head(red_snake_dir, red_snake);
    
    // Black screen
    for (ptr = 0; ptr < 320*480 ; ptr++) {
        fb[ptr]=0u; 
    }
    
    draw_snake(blue_snake, blue_snake_clr);
    draw_snake(red_snake, red_snake_clr);
    draw_apple(apple_x, apple_y);

    int gloo = check_collisions(blue_snake->x, blue_snake->y, red_snake->x, red_snake->y, &apple_x, &apple_y);

    if (gloo == 2 || gloo == 3) {
      break;
    }

    if (gloo == 4) {
      Snake* tmp = create_snake_part(blue_tail->index++, blue_tail->x, blue_tail->y);
      add_snake(blue_tail, tmp);
      blue_tail = tmp;
      blue_snake_len++;
    }

    // Painting the LCD display
    parlcd_write_cmd(parlcd_mem_base, 0x2c);
    for (ptr = 0; ptr < 480*320 ; ptr++) {
        parlcd_write_data(parlcd_mem_base, fb[ptr]);
    }
    clock_nanosleep(CLOCK_MONOTONIC, 0, &loop_delay, NULL);
  }

/*
END OF GAME LOOP
*********************************************************************************************************************************
*/